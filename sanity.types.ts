/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type HistorietasTag = {
  _id: string;
  _type: "historietas-tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<
    {
      _key: string;
    } & InternationalizedArrayStringValue
  >;
  slug?: Slug;
};

export type HistorietasPost = {
  _id: string;
  _type: "historietas-post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<
    {
      _key: string;
    } & InternationalizedArrayStringValue
  >;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "historietas-author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: Array<
      {
        _key: string;
      } & InternationalizedArrayStringValue
    >;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "historietas-category";
  }>;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "historietas-tag";
  }>;
  body?: Array<
    {
      _key: string;
    } & InternationalizedArrayTextValue
  >;
};

export type HistorietasAuthor = {
  _id: string;
  _type: "historietas-author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type HistorietasCategory = {
  _id: string;
  _type: "historietas-category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<
    {
      _key: string;
    } & InternationalizedArrayStringValue
  >;
  slug?: Slug;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type InternationalizedArrayTextValue = {
  _type: "internationalizedArrayTextValue";
  value?: string;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayText = Array<
  {
    _key: string;
  } & InternationalizedArrayTextValue
>;

export type InternationalizedArrayString = Array<
  {
    _key: string;
  } & InternationalizedArrayStringValue
>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | HistorietasTag
  | HistorietasPost
  | HistorietasAuthor
  | HistorietasCategory
  | BlockContent
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayText
  | InternationalizedArrayString
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/fetch/getAllPosts.ts
// Variable: ALL_POSTS_QUERY
// Query: *[_type == "historietas-post"]| order(_createdAt desc) {  _id,  _createdAt,  "slug": slug.current,  "title": title[_key == $locale][0].value,  "body": body[_key == $locale][0].value,  mainImage {    "alt": alt[_key == $locale][0].value,    asset->{      _id,      url,      metadata {        dimensions      }    }  },  author->{    name,    "slug": slug.current,    image  },  categories[]->{    _id,  "title": title[_key == $locale][0].value,   "slug": slug.current  },  tags[]->{    _id,   "title": title[_key == $locale][0].value,  "slug": slug.current  }}
export type ALL_POSTS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  slug: string | null;
  title: string | null;
  body: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
  } | null;
  author: {
    name: string | null;
    slug: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
  }> | null;
  tags: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
  }> | null;
}>;

// Source: ./src/sanity/lib/fetch/getLatestPostSlugs.ts
// Variable: LATEST_POST_SLUGS_QUERY
// Query: *[_type == "historietas-post"] | order(_createdAt desc) [0...20] {  "slug": slug.current,}
export type LATEST_POST_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;

// Source: ./src/sanity/lib/fetch/getPostbySlug.ts
// Variable: POST_BY_SLUG_QUERY
// Query: *[_type == "historietas-post" && slug.current == $slug][0] {  _id,  _createdAt,  "slug": slug.current,  "title": title[_key == $locale][0].value,  "body": body[_key == $locale][0].value,  mainImage {    "alt": alt[_key == $locale][0].value,    asset->{      _id,      url,      metadata {        dimensions      }    }  },  author->{    name,    "slug": slug.current,    image  },  categories[]->{    _id,    "title": title[_key == $locale][0].value,    "slug": slug.current  },  tags[]->{    _id,    "title": title[_key == $locale][0].value,    "slug": slug.current  }}
export type POST_BY_SLUG_QUERYResult = {
  _id: string;
  _createdAt: string;
  slug: string | null;
  title: string | null;
  body: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
  } | null;
  author: {
    name: string | null;
    slug: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
  }> | null;
  tags: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n*[_type == "historietas-post"]| order(_createdAt desc) {\n  _id,\n  _createdAt,\n  "slug": slug.current,\n  "title": title[_key == $locale][0].value,\n  "body": body[_key == $locale][0].value,\n  mainImage {\n    "alt": alt[_key == $locale][0].value,\n    asset->{\n      _id,\n      url,\n      metadata {\n        dimensions\n      }\n    }\n  },\n  author->{\n    name,\n    "slug": slug.current,\n    image\n  },\n  categories[]->{\n    _id,\n  "title": title[_key == $locale][0].value,\n   "slug": slug.current\n  },\n  tags[]->{\n    _id,\n   "title": title[_key == $locale][0].value,\n  "slug": slug.current\n  }\n}': ALL_POSTS_QUERYResult;
    '\n*[_type == "historietas-post"] | order(_createdAt desc) [0...20] {\n  "slug": slug.current,\n}': LATEST_POST_SLUGS_QUERYResult;
    '\n*[_type == "historietas-post" && slug.current == $slug][0] {\n  _id,\n  _createdAt,\n  "slug": slug.current,\n  "title": title[_key == $locale][0].value,\n  "body": body[_key == $locale][0].value,\n  mainImage {\n    "alt": alt[_key == $locale][0].value,\n    asset->{\n      _id,\n      url,\n      metadata {\n        dimensions\n      }\n    }\n  },\n  author->{\n    name,\n    "slug": slug.current,\n    image\n  },\n  categories[]->{\n    _id,\n    "title": title[_key == $locale][0].value,\n    "slug": slug.current\n  },\n  tags[]->{\n    _id,\n    "title": title[_key == $locale][0].value,\n    "slug": slug.current\n  }\n}': POST_BY_SLUG_QUERYResult;
  }
}
